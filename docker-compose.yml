# Docker Compose file Reference (https://docs.docker.com/compose/compose-file/)
version: '3.7'
# Define services
services:
  # App backend service
  server:
    # Configuration for building the docker image for the backend service
    build:
      context: loginFormBackend # Use an image built from the specified dockerfile in the `app-server` directory.
      dockerfile: Dockerfile # Specify the Dockerfile path
    ports:
      - "8080:8080" # Forward the exposed port 8080 on the container (docker) to port 8080 on the host machine
    restart: always
    depends_on:
      - db # This service depends on mysql. Start that first.
    environment: # Pass environment variables to the service
      SPRING_DATASOURCE_URL: jdbc:mysql://db:3306/medilabLoginFormDB?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&serverTimezone=UTC&createDatabaseIfNotExist=true
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: password
      SPRING_DATASOURCE_SOLR_HOST: http://localhost:8983/solr
    networks: # Networks to join (Services on the same network can communicate with each other using their name and no need of address)
      - backend
      - frontend
      - solr

  # Frontend Service
  client:
    build:
      context: client # Use an image built from the specified dockerfile in the `app-client` directory.
      dockerfile: Dockerfile # Specify the Dockerfile path
    ports:
      - "80:80" # Map the exposed port 80 on the container to port 80 on the host machine
    restart: always
    depends_on:
      - server
    networks:
      - frontend
  # Database Service (Mysql)
  db:
    image: mysql:5.7
    ports:
      - "3307:3306"
    restart: always
    environment:
      MYSQL_DATABASE: medilabLoginFormDB
      MYSQL_USER: root
      MYSQL_PASSWORD: password
      MYSQL_ROOT_PASSWORD: password
      MYSQL_ROOT_HOST: '%'
    volumes: # volumes could help in case we lost stored data (it persist data in host machine in the db-data directory)
      - db-data:/var/lib/mysql
    networks:
      - backend

  solr:
    image: solr:8.8.0
    container_name: solr
    ports:
      - "8983:8983"
    volumes:
      - data:/opt/solr/server/solr/book
    entrypoint:
      - docker-entrypoint.sh
      - solr-precreate
      - book
    depends_on:
      - server
    networks:
      - solr

# Define Volumes to be created
volumes:
  db-data:
  data:
# Define Networks to be created to facilitate communication between containers
networks:
  backend:
  frontend:
  solr:
    driver: bridge